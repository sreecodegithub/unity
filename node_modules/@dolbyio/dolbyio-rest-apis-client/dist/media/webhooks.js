"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.deleteWebhook = exports.retrieveWebhook = exports.updateWebhook = exports.registerWebhook = void 0;
const httpHelpers_1 = require("./internal/httpHelpers");
/**
 * Registers a webhook that is triggered when a job completes.
 *
 * @link https://docs.dolby.io/media-apis/reference/media-webhook-post
 *
 * @param accessToken Access token to use for authentication.
 * @param url The callback url that will be called when job execution completes.
 * @param headers (Optional) Headers to include in the webhook call.
 *
 * @returns The webhook identifier through a `Promise`.
 */
const registerWebhook = (accessToken, url, headers) => __awaiter(void 0, void 0, void 0, function* () {
    const payload = {
        callback: {
            url: url,
        },
    };
    if (headers) {
        payload.callback['headers'] = headers;
    }
    const requestOptions = {
        hostname: 'api.dolby.com',
        path: '/media/webhooks',
        headers: {},
        accessToken,
        body: JSON.stringify(payload, null, '  '),
    };
    const response = yield (0, httpHelpers_1.sendPost)(requestOptions);
    if (response.hasOwnProperty('webhook_id')) {
        return response['webhook_id'];
    }
    return null;
});
exports.registerWebhook = registerWebhook;
/**
 * Updates the previously registered webhook configuration.
 *
 * @link https://docs.dolby.io/media-apis/reference/media-webhook-put
 *
 * @param accessToken Access token to use for authentication.
 * @param options Options to update the webhook.
 */
const updateWebhook = (accessToken, options) => __awaiter(void 0, void 0, void 0, function* () {
    const payload = {
        callback: {
            url: options.url,
        },
    };
    if (options.headers) {
        payload.callback['headers'] = options.headers;
    }
    const requestOptions = {
        hostname: 'api.dolby.com',
        path: '/media/webhooks',
        params: {
            id: options.webhookId,
        },
        headers: {},
        accessToken,
        body: JSON.stringify(payload, null, '  '),
    };
    yield (0, httpHelpers_1.sendPut)(requestOptions);
});
exports.updateWebhook = updateWebhook;
/**
 * Retrieves the previously registered webhook configuration.
 *
 * @link https://docs.dolby.io/media-apis/reference/media-webhook-get
 *
 * @param accessToken Access token to use for authentication.
 * @param webhookId Identifier of the webhook to retrieve.
 *
 * @returns The `Webhook` object through a `Promise`.
 */
const retrieveWebhook = (accessToken, webhookId) => __awaiter(void 0, void 0, void 0, function* () {
    const requestOptions = {
        hostname: 'api.dolby.com',
        path: '/media/webhooks',
        params: {
            id: webhookId,
        },
        headers: {},
        accessToken,
    };
    const response = yield (0, httpHelpers_1.sendGet)(requestOptions);
    return response;
});
exports.retrieveWebhook = retrieveWebhook;
/**
 * Deletes a previously registered webhook configuration.
 *
 * @link https://docs.dolby.io/media-apis/reference/media-webhook-delete
 *
 * @param accessToken Access token to use for authentication.
 * @param webhookId Identifier of the webhook to delete.
 *
 * @returns The webhook identifier through a `Promise`.
 */
const deleteWebhook = (accessToken, webhookId) => __awaiter(void 0, void 0, void 0, function* () {
    const requestOptions = {
        hostname: 'api.dolby.com',
        path: '/media/webhooks',
        params: {
            id: webhookId,
        },
        headers: {},
        accessToken,
    };
    const response = yield (0, httpHelpers_1.sendDelete)(requestOptions);
    if (response.hasOwnProperty('webhook_id')) {
        return response['webhook_id'];
    }
    return null;
});
exports.deleteWebhook = deleteWebhook;
//# sourceMappingURL=webhooks.js.map