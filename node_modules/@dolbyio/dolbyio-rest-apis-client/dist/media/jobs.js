"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.cancel = exports.listAll = exports.list = void 0;
const httpHelpers_1 = require("./internal/httpHelpers");
/**
 * Query Media Jobs.
 * List of jobs previously submitted, up to the last 31 days.
 *
 * @link https://docs.dolby.io/media-apis/reference/media-jobs-get
 *
 * @param accessToken Access token to use for authentication.
 * @param options Options to request the list of jobs.
 *
 * @returns A `JobsResponse` object through a `Promise`.
 */
const list = (accessToken, options) => __awaiter(void 0, void 0, void 0, function* () {
    const params = {};
    if (options.submitted_after) {
        params['submitted_after'] = options.submitted_after;
    }
    if (options.submitted_before) {
        params['submitted_before'] = options.submitted_before;
    }
    if (options.status) {
        params['status'] = options.status;
    }
    if (options.next_token) {
        params['next_token'] = options.next_token;
    }
    const requestOptions = {
        hostname: 'api.dolby.com',
        path: '/media/jobs',
        params,
        headers: {},
        accessToken,
    };
    const response = yield (0, httpHelpers_1.sendGet)(requestOptions);
    return response;
});
exports.list = list;
/**
 * Query Media Jobs.
 * List of all jobs previously submitted, up to the last 31 days.
 *
 * @link https://docs.dolby.io/media-apis/reference/media-jobs-get
 *
 * @param accessToken Access token to use for authentication.
 * @param options Options to request the list of jobs.
 *
 * @returns An array of `Job` objects through a `Promise`.
 */
const listAll = (accessToken, options) => __awaiter(void 0, void 0, void 0, function* () {
    const params = {};
    if (options.submitted_after) {
        params['submitted_after'] = options.submitted_after;
    }
    if (options.submitted_before) {
        params['submitted_before'] = options.submitted_before;
    }
    if (options.status) {
        params['status'] = options.status;
    }
    const requestOptions = {
        hostname: 'api.dolby.com',
        path: '/media/jobs',
        headers: {},
        accessToken,
    };
    const result = [];
    do {
        requestOptions.params = params;
        const response = (yield (0, httpHelpers_1.sendGet)(requestOptions));
        for (let index = 0; index < response.jobs.length; index++) {
            const object = response.jobs[index];
            result.push(object);
        }
        if (!response.next_token || response.next_token.length <= 0) {
            break;
        }
        params['next_token'] = response.next_token;
    } while (true);
    return result;
});
exports.listAll = listAll;
/**
 * Requests cancellation of a previously submitted job.
 *
 * @link https://docs.dolby.io/media-apis/reference/media-jobs-cancel-post
 *
 * @param accessToken Access token to use for authentication.
 * @param jobId Identifier of the job to cancel.
 */
const cancel = (accessToken, jobId) => __awaiter(void 0, void 0, void 0, function* () {
    const params = {
        job_id: jobId,
    };
    const requestOptions = {
        hostname: 'api.dolby.com',
        path: '/media/jobs/cancel',
        headers: {},
        accessToken,
        params: params,
    };
    yield (0, httpHelpers_1.sendPost)(requestOptions);
});
exports.cancel = cancel;
//# sourceMappingURL=jobs.js.map