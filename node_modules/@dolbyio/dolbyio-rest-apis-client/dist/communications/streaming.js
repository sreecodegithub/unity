"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.stopLls = exports.startLls = exports.stopRtmp = exports.startRtmp = void 0;
const httpHelpers_1 = require("../internal/httpHelpers");
/**
 * Starts an RTMP live stream. Once the Dolby.io Communication API service started streaming to the target url,
 * a `Stream.Rtmp.InProgress` Webhook event will be sent. You must use this API if the conference is protected
 * using enhanced conference access control.
 *
 * @link https://docs.dolby.io/communications-apis/reference/start-rtmp
 *
 * @param accessToken Access token to use for authentication.
 * @param conferenceId Identifier of the conference.
 * @param rtmpUrls List of the RTMP endpoints where to send the RTMP stream to.
 */
const startRtmp = (accessToken, conferenceId, rtmpUrls) => __awaiter(void 0, void 0, void 0, function* () {
    const uri = typeof rtmpUrls === 'string' ? rtmpUrls : rtmpUrls.join('|');
    const body = JSON.stringify({ uri: uri });
    const options = {
        hostname: 'api.voxeet.com',
        path: `/v2/conferences/mix/${conferenceId}/rtmp/start`,
        headers: {
            Accept: 'application/json',
            'Content-Type': 'application/json',
            Authorization: `${accessToken.token_type} ${accessToken.access_token}`,
        },
        body,
    };
    yield (0, httpHelpers_1.sendPost)(options);
});
exports.startRtmp = startRtmp;
/**
 * Stops an RTMP stream. You must use this API if the conference is protected using enhanced conference access control.
 *
 * @link https://docs.dolby.io/communications-apis/reference/stop-rtmp
 *
 * @param accessToken Access token to use for authentication.
 * @param conferenceId Identifier of the conference.
 */
const stopRtmp = (accessToken, conferenceId) => __awaiter(void 0, void 0, void 0, function* () {
    const options = {
        hostname: 'api.voxeet.com',
        path: `/v2/conferences/mix/${conferenceId}/rtmp/stop`,
        headers: {
            Accept: 'application/json',
            'Content-Type': 'application/json',
            Authorization: `${accessToken.token_type} ${accessToken.access_token}`,
        },
    };
    yield (0, httpHelpers_1.sendPost)(options);
});
exports.stopRtmp = stopRtmp;
/**
 * Starts a Low Latency Stream to Millicast.
 *
 * @link https://docs.dolby.io/communications-apis/reference/start-lls
 *
 * @param accessToken Access token to use for authentication.
 * @param conferenceId Identifier of the conference.
 * @param streamName The Millicast stream name to which the conference will broadcasted.
 * @param publishingToken The Millicast publishing token used to identify the broadcaster.
 */
const startLls = (accessToken, conferenceId, streamName, publishingToken) => __awaiter(void 0, void 0, void 0, function* () {
    const body = JSON.stringify({
        streamName: streamName,
        publishingToken: publishingToken,
    });
    const options = {
        hostname: 'api.voxeet.com',
        path: `/v2/conferences/mix/${conferenceId}/lls/start`,
        headers: {
            Accept: 'application/json',
            'Content-Type': 'application/json',
            Authorization: `${accessToken.token_type} ${accessToken.access_token}`,
        },
        body,
    };
    yield (0, httpHelpers_1.sendPost)(options);
});
exports.startLls = startLls;
/**
 * Stops an existing Low Latency Stream to Millicast.
 *
 * @link https://docs.dolby.io/communications-apis/reference/stop-lls
 *
 * @param accessToken Access token to use for authentication.
 * @param conferenceId Identifier of the conference.
 */
const stopLls = (accessToken, conferenceId) => __awaiter(void 0, void 0, void 0, function* () {
    const options = {
        hostname: 'api.voxeet.com',
        path: `/v2/conferences/mix/${conferenceId}/lls/stop`,
        headers: {
            Accept: 'application/json',
            'Content-Type': 'application/json',
            Authorization: `${accessToken.token_type} ${accessToken.access_token}`,
        },
    };
    yield (0, httpHelpers_1.sendPost)(options);
});
exports.stopLls = stopLls;
//# sourceMappingURL=streaming.js.map