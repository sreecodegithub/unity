import JwtToken from '../types/jwtToken';
import { GetRecordingsOptions, GetAllRecordingsOptions, GetRecordingsResponse, Recording, GetRecordingOptions, DolbyVoiceRecording } from '../types/recordings';
/**
 * Get a list of the recorded conference metadata, such as duration or size of the recording.
 * This API checks only the recordings that have ended during a specific time range.
 * Recordings are indexed based on the ending time.
 *
 * @link https://docs.dolby.io/communications-apis/reference/get-recordings
 *
 * @param accessToken Access token to use for authentication.
 * @param options Options to request the recordings.
 *
 * @returns A `GetRecordingsResponse` object through a `Promise`.
 */
export declare const getRecordings: (accessToken: JwtToken, options: GetRecordingsOptions) => Promise<GetRecordingsResponse>;
/**
 * Get a list of the recorded conference metadata, such as duration or size of the recording.
 * This API checks only the recordings that have ended during a specific time range.
 * Recordings are indexed based on the ending time.
 *
 * @link https://docs.dolby.io/communications-apis/reference/get-recordings
 *
 * @param accessToken Access token to use for authentication.
 * @param options Options to request the recordings.
 *
 * @returns An array of `Recording` objects through a `Promise`.
 */
export declare const getAllRecordings: (accessToken: JwtToken, options: GetAllRecordingsOptions) => Promise<Array<Recording>>;
/**
 * Get a list of the recorded conference metadata, such as duration or size of the recording.
 * This API checks the recordings that have ended during a specific time range.
 * Recordings are indexed based on the ending time.
 *
 * @link https://docs.dolby.io/communications-apis/reference/get-conference-recordings
 *
 * @param accessToken Access token to use for authentication.
 * @param options Options to request the webhooks.
 *
 * @returns An array of `Recording` objects through a `Promise`.
 */
export declare const getRecording: (accessToken: JwtToken, options: GetRecordingOptions) => Promise<Array<Recording>>;
/**
 * Delete all recording data related to a specific conference.
 *
 * **Warning**: After deleting the recording, it is not possible to restore the recording data.
 *
 * @link https://docs.dolby.io/communications-apis/reference/delete-conference-recordings
 *
 * @param accessToken Access token to use for authentication.
 * @param confId Identifier of the conference.
 */
export declare const deleteRecording: (accessToken: JwtToken, confId: string) => Promise<void>;
/**
 * Get details of all Dolby Voice-based audio recordings, and associated split recordings,
 * for a given conference and download the conference recording in the MP3 audio format.
 *
 * @link https://docs.dolby.io/communications-apis/reference/get-dolby-voice-audio-recordings
 *
 * @param accessToken Access token to use for authentication.
 * @param confId Identifier of the conference.
 *
 * @returns A `DolbyVoiceRecording` object through a `Promise`.
 */
export declare const getDolbyVoiceRecording: (accessToken: JwtToken, confId: string) => Promise<DolbyVoiceRecording>;
/**
 * Download the conference recording in the MP4 video format.
 * For more information, see the [Recording](https://docs.dolby.io/communications-apis/docs/guides-recording-mechanisms) document.
 *
 * @link https://docs.dolby.io/communications-apis/reference/get-mp4-recording
 *
 * @param accessToken Access token to use for authentication.
 * @param confId Identifier of the conference.
 * @param filepath Where to save the file.
 */
export declare const downloadMp4Recording: (accessToken: JwtToken, confId: string, filepath: string) => Promise<void>;
/**
 * Download the conference recording in the MP3 audio format.
 * For more information, see the [Recording](https://docs.dolby.io/communications-apis/docs/guides-recording-mechanisms) document.
 *
 * @link https://docs.dolby.io/communications-apis/reference/get-mp3-recording
 *
 * @param accessToken Access token to use for authentication.
 * @param confId Identifier of the conference.
 * @param filepath Where to save the file.
 */
export declare const downloadMp3Recording: (accessToken: JwtToken, confId: string, filepath: string) => Promise<void>;
