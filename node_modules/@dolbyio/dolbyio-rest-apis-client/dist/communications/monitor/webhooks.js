"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAllEvents = exports.getEvents = void 0;
const httpHelpers_1 = require("../../internal/httpHelpers");
const httpHelpers_2 = require("../internal/httpHelpers");
/**
 * Gets a list of Webhook events sent, during a specific time range. The list includes associated endpoint response codes and headers.
 *
 * @link https://docs.dolby.io/communications-apis/reference/get-webhooks
 *
 * @param accessToken Access token to use for authentication.
 * @param options Options to request the webhooks.
 *
 * @returns A `GetWebHookResponse` object through a `Promise`.
 */
const getEvents = (accessToken, options) => __awaiter(void 0, void 0, void 0, function* () {
    const optionsDefault = {
        from: 0,
        to: 9999999999999,
        max: 100,
    };
    const opts = Object.assign(optionsDefault, options);
    let path = '/v1/monitor/';
    if (opts.conferenceId) {
        path += `conferences/${opts.conferenceId}/`;
    }
    path += 'webhooks';
    const params = {
        from: opts.from.toString(),
        to: opts.to.toString(),
        max: opts.max.toString(),
    };
    if (opts.type) {
        params['type'] = opts.type;
    }
    if (opts.start) {
        params['start'] = opts.start;
    }
    const requestOptions = {
        hostname: 'api.voxeet.com',
        path,
        params,
        headers: {
            Accept: 'application/json',
            Authorization: `${accessToken.token_type} ${accessToken.access_token}`,
        },
    };
    const response = yield (0, httpHelpers_1.sendGet)(requestOptions);
    return response;
});
exports.getEvents = getEvents;
/**
 * Gets a list of all Webhook events sent, during a specific time range. The list includes associated endpoint response codes and headers.
 *
 * @link https://docs.dolby.io/communications-apis/reference/get-webhooks
 *
 * @param accessToken Access token to use for authentication.
 * @param options Options to request the webhooks.
 *
 * @returns An array of `WebHook` objects through a `Promise`.
 */
const getAllEvents = (accessToken, options) => __awaiter(void 0, void 0, void 0, function* () {
    const optionsDefault = {
        from: 0,
        to: 9999999999999,
        page_size: 100,
    };
    const opts = Object.assign(optionsDefault, options);
    let path = '/v1/monitor/';
    if (opts.conferenceId) {
        path += `conferences/${opts.conferenceId}/`;
    }
    path += 'webhooks';
    const params = {
        from: opts.from.toString(),
        to: opts.to.toString(),
        max: opts.page_size.toString(),
    };
    if (opts.type) {
        params['type'] = opts.type;
    }
    const requestOptions = {
        hostname: 'api.voxeet.com',
        path,
        params,
        headers: {
            Accept: 'application/json',
            Authorization: `${accessToken.token_type} ${accessToken.access_token}`,
        },
    };
    return yield (0, httpHelpers_2.getAll)(requestOptions, 'webhooks');
});
exports.getAllEvents = getAllEvents;
//# sourceMappingURL=webhooks.js.map