/// <reference types="node" />
import JwtToken from '../types/jwtToken';
import { ListConferencesOptions, ListAllConferencesOptions, ListConferencesResponse, Conference, Statistics, ListParticipantsOptions, ListAllParticipantsOptions, ParticipantsResponse, Participant } from '../types/conferences';
/**
 * Get a list of conferences that were started in a specific time range, including ongoing conferences.
 *
 * **Note:** Only terminated conferences include a complete summary.
 * The summary of ongoing conferences includes the following fields in the response: `confId`, `alias`, `region`, `dolbyVoice`, `start`, `live`, `owner`.
 *
 * @link https://docs.dolby.io/communications-apis/reference/get-conferences
 *
 * @param accessToken Access token to use for authentication.
 * @param options Options to request the conferences.
 *
 * @returns A `ListConferencesResponse` object through a `Promise`.
 */
export declare const listConferences: (accessToken: JwtToken, options: ListConferencesOptions) => Promise<ListConferencesResponse>;
/**
 * Get a list of all the conferences that were started in a specific time range, including ongoing conferences.
 *
 * **Note:** Only terminated conferences include a complete summary.
 * The summary of ongoing conferences includes the following fields in the response: `confId`, `alias`, `region`, `dolbyVoice`, `start`, `live`, `owner`.
 *
 * @link https://docs.dolby.io/communications-apis/reference/get-conferences
 *
 * @param accessToken Access token to use for authentication.
 * @param options Options to request the conferences.
 *
 * @returns An array of `Conference` objects through a `Promise`.
 */
export declare const listAllConferences: (accessToken: JwtToken, options: ListAllConferencesOptions) => Promise<Array<Conference>>;
/**
 * Get a summary of a conference.
 *
 * **Note:** Only terminated conferences include a complete summary.
 * The summary of ongoing conferences includes the following fields in the response: `confId`, `alias`, `region`, `dolbyVoice`, `start`, `live`, `owner`.
 *
 * @link https://docs.dolby.io/communications-apis/reference/get-conference-summary
 *
 * @param accessToken Access token to use for authentication.
 * @param conferenceId The identifier of the conference.
 * @param livestats For live conferences, the number of `user`, `listener`, and `pstn` participants.
 *
 * @returns A `Conference` object through a `Promise`.
 */
export declare const getConference: (accessToken: JwtToken, conferenceId: string, livestats?: boolean) => Promise<Conference>;
/**
 * Get statistics of a terminated conference. The statistics include the maximum number of participants present during a conference and the maximum number of the transmitted and received packets, bytes, and streams.
 *
 * **Note:** Only terminated conferences include a complete summary.
 *
 * @link https://docs.dolby.io/communications-apis/reference/get-conference-statistics
 *
 * @param accessToken Access token to use for authentication.
 * @param conferenceId The identifier of the conference.
 *
 * @returns A `Statistics` object through a `Promise`.
 */
export declare const getConferenceStatistics: (accessToken: JwtToken, conferenceId: string) => Promise<Statistics>;
/**
 * Get statistics and connection details of all participants in a conference. Optionally limit the search result with a specific time range.
 *
 * @link https://docs.dolby.io/communications-apis/reference/get-info-conference-participants
 *
 * @param accessToken Access token to use for authentication.
 * @param options Options to request the participants.
 *
 * @returns A `ParticipantsResponse` object through a `Promise`.
 */
export declare const getConferenceParticipants: (accessToken: JwtToken, options: ListParticipantsOptions) => Promise<ParticipantsResponse>;
/**
 * Get statistics and connection details of all participants in a conference. Optionally limit the search result with a specific time range.
 *
 * @link https://docs.dolby.io/communications-apis/reference/get-info-conference-participants
 *
 * @param accessToken Access token to use for authentication.
 * @param options Options to request the participants.
 *
 * @returns A dictionary of `Participant` object through a `Promise`.
 */
export declare const getAllConferenceParticipants: (accessToken: JwtToken, options: ListAllParticipantsOptions) => Promise<NodeJS.Dict<Participant>>;
