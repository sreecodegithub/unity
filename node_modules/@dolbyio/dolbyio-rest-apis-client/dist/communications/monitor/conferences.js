"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAllConferenceParticipants = exports.getConferenceParticipants = exports.getConferenceStatistics = exports.getConference = exports.listAllConferences = exports.listConferences = void 0;
const httpHelpers_1 = require("../../internal/httpHelpers");
const httpHelpers_2 = require("../internal/httpHelpers");
/**
 * Get a list of conferences that were started in a specific time range, including ongoing conferences.
 *
 * **Note:** Only terminated conferences include a complete summary.
 * The summary of ongoing conferences includes the following fields in the response: `confId`, `alias`, `region`, `dolbyVoice`, `start`, `live`, `owner`.
 *
 * @link https://docs.dolby.io/communications-apis/reference/get-conferences
 *
 * @param accessToken Access token to use for authentication.
 * @param options Options to request the conferences.
 *
 * @returns A `ListConferencesResponse` object through a `Promise`.
 */
const listConferences = (accessToken, options) => __awaiter(void 0, void 0, void 0, function* () {
    const optionsDefault = {
        from: 0,
        to: 9999999999999,
        max: 100,
        active: false,
        livestats: false,
    };
    const opts = Object.assign(optionsDefault, options);
    const params = {
        from: opts.from.toString(),
        to: opts.to.toString(),
        max: opts.max.toString(),
        active: opts.active.toString(),
        livestats: opts.livestats.toString(),
    };
    if (opts.start) {
        params['start'] = opts.start;
    }
    if (opts.alias) {
        params['alias'] = opts.alias;
    }
    if (opts.exid) {
        params['exid'] = opts.exid;
    }
    const requestOptions = {
        hostname: 'api.voxeet.com',
        path: '/v1/monitor/conferences',
        params,
        headers: {
            Accept: 'application/json',
            Authorization: `${accessToken.token_type} ${accessToken.access_token}`,
        },
    };
    const response = yield (0, httpHelpers_1.sendGet)(requestOptions);
    return response;
});
exports.listConferences = listConferences;
/**
 * Get a list of all the conferences that were started in a specific time range, including ongoing conferences.
 *
 * **Note:** Only terminated conferences include a complete summary.
 * The summary of ongoing conferences includes the following fields in the response: `confId`, `alias`, `region`, `dolbyVoice`, `start`, `live`, `owner`.
 *
 * @link https://docs.dolby.io/communications-apis/reference/get-conferences
 *
 * @param accessToken Access token to use for authentication.
 * @param options Options to request the conferences.
 *
 * @returns An array of `Conference` objects through a `Promise`.
 */
const listAllConferences = (accessToken, options) => __awaiter(void 0, void 0, void 0, function* () {
    const optionsDefault = {
        from: 0,
        to: 9999999999999,
        page_size: 100,
        active: false,
        livestats: false,
    };
    const opts = Object.assign(optionsDefault, options);
    const params = {
        from: opts.from.toString(),
        to: opts.to.toString(),
        max: opts.page_size.toString(),
        active: opts.active.toString(),
        livestats: opts.livestats.toString(),
    };
    if (opts.alias) {
        params['alias'] = opts.alias;
    }
    if (opts.exid) {
        params['exid'] = opts.exid;
    }
    const requestOptions = {
        hostname: 'api.voxeet.com',
        path: '/v1/monitor/conferences',
        params,
        headers: {
            Accept: 'application/json',
            Authorization: `${accessToken.token_type} ${accessToken.access_token}`,
        },
    };
    return yield (0, httpHelpers_2.getAll)(requestOptions, 'conferences');
});
exports.listAllConferences = listAllConferences;
/**
 * Get a summary of a conference.
 *
 * **Note:** Only terminated conferences include a complete summary.
 * The summary of ongoing conferences includes the following fields in the response: `confId`, `alias`, `region`, `dolbyVoice`, `start`, `live`, `owner`.
 *
 * @link https://docs.dolby.io/communications-apis/reference/get-conference-summary
 *
 * @param accessToken Access token to use for authentication.
 * @param conferenceId The identifier of the conference.
 * @param livestats For live conferences, the number of `user`, `listener`, and `pstn` participants.
 *
 * @returns A `Conference` object through a `Promise`.
 */
const getConference = (accessToken, conferenceId, livestats = false) => __awaiter(void 0, void 0, void 0, function* () {
    const options = {
        hostname: 'api.voxeet.com',
        path: `v1/monitor/conferences/${conferenceId}?livestats=${livestats}`,
        headers: {
            Accept: 'application/json',
            Authorization: `${accessToken.token_type} ${accessToken.access_token}`,
        },
    };
    const response = yield (0, httpHelpers_1.sendGet)(options);
    return response;
});
exports.getConference = getConference;
/**
 * Get statistics of a terminated conference. The statistics include the maximum number of participants present during a conference and the maximum number of the transmitted and received packets, bytes, and streams.
 *
 * **Note:** Only terminated conferences include a complete summary.
 *
 * @link https://docs.dolby.io/communications-apis/reference/get-conference-statistics
 *
 * @param accessToken Access token to use for authentication.
 * @param conferenceId The identifier of the conference.
 *
 * @returns A `Statistics` object through a `Promise`.
 */
const getConferenceStatistics = (accessToken, conferenceId) => __awaiter(void 0, void 0, void 0, function* () {
    const options = {
        hostname: 'api.voxeet.com',
        path: `/v1/monitor/conferences/${conferenceId}/statistics`,
        headers: {
            Accept: 'application/json',
            Authorization: `${accessToken.token_type} ${accessToken.access_token}`,
        },
    };
    const response = yield (0, httpHelpers_1.sendGet)(options);
    return response;
});
exports.getConferenceStatistics = getConferenceStatistics;
/**
 * Get statistics and connection details of all participants in a conference. Optionally limit the search result with a specific time range.
 *
 * @link https://docs.dolby.io/communications-apis/reference/get-info-conference-participants
 *
 * @param accessToken Access token to use for authentication.
 * @param options Options to request the participants.
 *
 * @returns A `ParticipantsResponse` object through a `Promise`.
 */
const getConferenceParticipants = (accessToken, options) => __awaiter(void 0, void 0, void 0, function* () {
    const optionsDefault = {
        confId: options.confId,
        from: 0,
        to: 9999999999999,
        max: 100,
    };
    const opts = Object.assign(optionsDefault, options);
    let path = `/v1/monitor/conferences/${opts.confId}/participants`;
    if (opts.userId) {
        path += `/${opts.userId}`;
    }
    const params = {
        from: opts.from.toString(),
        to: opts.to.toString(),
        max: opts.max.toString(),
    };
    if (opts.start) {
        params['start'] = opts.start;
    }
    if (opts.type) {
        params['type'] = opts.type;
    }
    const requestOptions = {
        hostname: 'api.voxeet.com',
        path: path,
        params,
        headers: {
            Accept: 'application/json',
            Authorization: `${accessToken.token_type} ${accessToken.access_token}`,
        },
    };
    const response = yield (0, httpHelpers_1.sendGet)(requestOptions);
    return response;
});
exports.getConferenceParticipants = getConferenceParticipants;
/**
 * Get statistics and connection details of all participants in a conference. Optionally limit the search result with a specific time range.
 *
 * @link https://docs.dolby.io/communications-apis/reference/get-info-conference-participants
 *
 * @param accessToken Access token to use for authentication.
 * @param options Options to request the participants.
 *
 * @returns A dictionary of `Participant` object through a `Promise`.
 */
const getAllConferenceParticipants = (accessToken, options) => __awaiter(void 0, void 0, void 0, function* () {
    const optionsDefault = {
        confId: options.confId,
        from: 0,
        to: 9999999999999,
        page_size: 100,
    };
    const opts = Object.assign(optionsDefault, options);
    let path = `/v1/monitor/conferences/${opts.confId}/participants`;
    if (opts.userId) {
        path += `/${opts.userId}`;
    }
    const params = {
        from: opts.from.toString(),
        to: opts.to.toString(),
        max: opts.page_size.toString(),
    };
    if (opts.type) {
        params['type'] = opts.type;
    }
    const requestOptions = {
        hostname: 'api.voxeet.com',
        path: path,
        params,
        headers: {
            Accept: 'application/json',
            Authorization: `${accessToken.token_type} ${accessToken.access_token}`,
        },
    };
    const result = {};
    do {
        const response = yield (0, httpHelpers_1.sendGet)(requestOptions);
        if (response.hasOwnProperty('participants')) {
            const dico = response['participants'];
            for (var key in dico) {
                if (dico.hasOwnProperty(key)) {
                    result[key] = dico[key];
                }
            }
        }
        const pagedResponse = response;
        if (!pagedResponse.next || pagedResponse.next.length <= 0) {
            break;
        }
        requestOptions.params['start'] = pagedResponse.next;
    } while (true);
    return result;
});
exports.getAllConferenceParticipants = getAllConferenceParticipants;
//# sourceMappingURL=conferences.js.map