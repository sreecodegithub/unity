"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.downloadMp3Recording = exports.downloadMp4Recording = exports.getDolbyVoiceRecording = exports.deleteRecording = exports.getRecording = exports.getAllRecordings = exports.getRecordings = void 0;
const httpHelpers_1 = require("../../internal/httpHelpers");
const httpHelpers_2 = require("../internal/httpHelpers");
/**
 * Get a list of the recorded conference metadata, such as duration or size of the recording.
 * This API checks only the recordings that have ended during a specific time range.
 * Recordings are indexed based on the ending time.
 *
 * @link https://docs.dolby.io/communications-apis/reference/get-recordings
 *
 * @param accessToken Access token to use for authentication.
 * @param options Options to request the recordings.
 *
 * @returns A `GetRecordingsResponse` object through a `Promise`.
 */
const getRecordings = (accessToken, options) => __awaiter(void 0, void 0, void 0, function* () {
    const optionsDefault = {
        from: 0,
        to: 9999999999999,
        max: 100,
    };
    const opts = Object.assign(optionsDefault, options);
    const params = {
        from: opts.from.toString(),
        to: opts.to.toString(),
        max: opts.max.toString(),
    };
    if (opts.start) {
        params['start'] = opts.start;
    }
    const requestOptions = {
        hostname: 'api.voxeet.com',
        path: '/v1/monitor/recordings',
        params,
        headers: {
            Accept: 'application/json',
            Authorization: `${accessToken.token_type} ${accessToken.access_token}`,
        },
    };
    const response = yield (0, httpHelpers_1.sendGet)(requestOptions);
    return response;
});
exports.getRecordings = getRecordings;
/**
 * Get a list of the recorded conference metadata, such as duration or size of the recording.
 * This API checks only the recordings that have ended during a specific time range.
 * Recordings are indexed based on the ending time.
 *
 * @link https://docs.dolby.io/communications-apis/reference/get-recordings
 *
 * @param accessToken Access token to use for authentication.
 * @param options Options to request the recordings.
 *
 * @returns An array of `Recording` objects through a `Promise`.
 */
const getAllRecordings = (accessToken, options) => __awaiter(void 0, void 0, void 0, function* () {
    const optionsDefault = {
        from: 0,
        to: 9999999999999,
        page_size: 100,
    };
    const opts = Object.assign(optionsDefault, options);
    const params = {
        from: opts.from.toString(),
        to: opts.to.toString(),
        max: opts.page_size.toString(),
    };
    const requestOptions = {
        hostname: 'api.voxeet.com',
        path: '/v1/monitor/recordings',
        params,
        headers: {
            Accept: 'application/json',
            Authorization: `${accessToken.token_type} ${accessToken.access_token}`,
        },
    };
    return yield (0, httpHelpers_2.getAll)(requestOptions, 'recordings');
});
exports.getAllRecordings = getAllRecordings;
/**
 * Get a list of the recorded conference metadata, such as duration or size of the recording.
 * This API checks the recordings that have ended during a specific time range.
 * Recordings are indexed based on the ending time.
 *
 * @link https://docs.dolby.io/communications-apis/reference/get-conference-recordings
 *
 * @param accessToken Access token to use for authentication.
 * @param options Options to request the webhooks.
 *
 * @returns An array of `Recording` objects through a `Promise`.
 */
const getRecording = (accessToken, options) => __awaiter(void 0, void 0, void 0, function* () {
    const optionsDefault = {
        from: 0,
        to: 9999999999999,
        max: 100,
    };
    const opts = Object.assign(optionsDefault, options);
    const params = {
        from: opts.from.toString(),
        to: opts.to.toString(),
        max: opts.max.toString(),
    };
    if (opts.start) {
        params['start'] = opts.start;
    }
    const requestOptions = {
        hostname: 'api.voxeet.com',
        path: `/v1/monitor/conferences/${opts.confId}/recordings`,
        params,
        headers: {
            Accept: 'application/json',
            Authorization: `${accessToken.token_type} ${accessToken.access_token}`,
        },
    };
    const response = yield (0, httpHelpers_1.sendGet)(requestOptions);
    return response.recordings;
});
exports.getRecording = getRecording;
/**
 * Delete all recording data related to a specific conference.
 *
 * **Warning**: After deleting the recording, it is not possible to restore the recording data.
 *
 * @link https://docs.dolby.io/communications-apis/reference/delete-conference-recordings
 *
 * @param accessToken Access token to use for authentication.
 * @param confId Identifier of the conference.
 */
const deleteRecording = (accessToken, confId) => __awaiter(void 0, void 0, void 0, function* () {
    const requestOptions = {
        hostname: 'api.voxeet.com',
        path: `/v1/monitor/conferences/${confId}/recordings`,
        headers: {
            Accept: 'application/json',
            Authorization: `${accessToken.token_type} ${accessToken.access_token}`,
        },
    };
    yield (0, httpHelpers_1.sendDelete)(requestOptions);
});
exports.deleteRecording = deleteRecording;
/**
 * Get details of all Dolby Voice-based audio recordings, and associated split recordings,
 * for a given conference and download the conference recording in the MP3 audio format.
 *
 * @link https://docs.dolby.io/communications-apis/reference/get-dolby-voice-audio-recordings
 *
 * @param accessToken Access token to use for authentication.
 * @param confId Identifier of the conference.
 *
 * @returns A `DolbyVoiceRecording` object through a `Promise`.
 */
const getDolbyVoiceRecording = (accessToken, confId) => __awaiter(void 0, void 0, void 0, function* () {
    const requestOptions = {
        hostname: 'api.voxeet.com',
        path: `/v1/monitor/conferences/${confId}/recordings/audio`,
        headers: {
            Accept: 'application/json',
            Authorization: `${accessToken.token_type} ${accessToken.access_token}`,
        },
    };
    const response = yield (0, httpHelpers_1.sendGet)(requestOptions);
    return response;
});
exports.getDolbyVoiceRecording = getDolbyVoiceRecording;
/**
 * Download the conference recording in the MP4 video format.
 * For more information, see the [Recording](https://docs.dolby.io/communications-apis/docs/guides-recording-mechanisms) document.
 *
 * @link https://docs.dolby.io/communications-apis/reference/get-mp4-recording
 *
 * @param accessToken Access token to use for authentication.
 * @param confId Identifier of the conference.
 * @param filepath Where to save the file.
 */
const downloadMp4Recording = (accessToken, confId, filepath) => __awaiter(void 0, void 0, void 0, function* () {
    const requestOptions = {
        hostname: 'api.voxeet.com',
        path: `/v1/monitor/conferences/${confId}/recordings/mp4`,
        headers: {
            Accept: 'video/mp4',
            Authorization: `${accessToken.token_type} ${accessToken.access_token}`,
        },
    };
    yield (0, httpHelpers_1.download)(filepath, requestOptions);
});
exports.downloadMp4Recording = downloadMp4Recording;
/**
 * Download the conference recording in the MP3 audio format.
 * For more information, see the [Recording](https://docs.dolby.io/communications-apis/docs/guides-recording-mechanisms) document.
 *
 * @link https://docs.dolby.io/communications-apis/reference/get-mp3-recording
 *
 * @param accessToken Access token to use for authentication.
 * @param confId Identifier of the conference.
 * @param filepath Where to save the file.
 */
const downloadMp3Recording = (accessToken, confId, filepath) => __awaiter(void 0, void 0, void 0, function* () {
    const requestOptions = {
        hostname: 'api.voxeet.com',
        path: `/v1/monitor/conferences/${confId}/recordings/mp3`,
        headers: {
            Accept: 'video/mpeg',
            Authorization: `${accessToken.token_type} ${accessToken.access_token}`,
        },
    };
    yield (0, httpHelpers_1.download)(filepath, requestOptions);
});
exports.downloadMp3Recording = downloadMp3Recording;
//# sourceMappingURL=recordings.js.map