import JwtToken from './types/jwtToken';
/**
 * Starts an RTMP live stream. Once the Dolby.io Communication API service started streaming to the target url,
 * a `Stream.Rtmp.InProgress` Webhook event will be sent. You must use this API if the conference is protected
 * using enhanced conference access control.
 *
 * @link https://docs.dolby.io/communications-apis/reference/start-rtmp
 *
 * @param accessToken Access token to use for authentication.
 * @param conferenceId Identifier of the conference.
 * @param rtmpUrls List of the RTMP endpoints where to send the RTMP stream to.
 */
export declare const startRtmp: (accessToken: JwtToken, conferenceId: string, rtmpUrls: string | Array<string>) => Promise<void>;
/**
 * Stops an RTMP stream. You must use this API if the conference is protected using enhanced conference access control.
 *
 * @link https://docs.dolby.io/communications-apis/reference/stop-rtmp
 *
 * @param accessToken Access token to use for authentication.
 * @param conferenceId Identifier of the conference.
 */
export declare const stopRtmp: (accessToken: JwtToken, conferenceId: string) => Promise<void>;
/**
 * Starts a Low Latency Stream to Millicast.
 *
 * @link https://docs.dolby.io/communications-apis/reference/start-lls
 *
 * @param accessToken Access token to use for authentication.
 * @param conferenceId Identifier of the conference.
 * @param streamName The Millicast stream name to which the conference will broadcasted.
 * @param publishingToken The Millicast publishing token used to identify the broadcaster.
 */
export declare const startLls: (accessToken: JwtToken, conferenceId: string, streamName: string, publishingToken: string) => Promise<void>;
/**
 * Stops an existing Low Latency Stream to Millicast.
 *
 * @link https://docs.dolby.io/communications-apis/reference/stop-lls
 *
 * @param accessToken Access token to use for authentication.
 * @param conferenceId Identifier of the conference.
 */
export declare const stopLls: (accessToken: JwtToken, conferenceId: string) => Promise<void>;
