"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.download = exports.sendDelete = exports.sendPut = exports.sendPost = exports.sendGet = void 0;
const fs_1 = __importDefault(require("fs"));
const follow_redirects_1 = require("follow-redirects");
const url_1 = require("url");
/**
 * Sends a POST request.
 *
 * @param options request options.
 *
 * @returns A JSON payload object through a Promise.
 */
const sendRequest = (options) => {
    return new Promise((resolve, reject) => {
        let path = options.path;
        if (options.params && Object.keys(options.params).length > 0) {
            const searchParams = new url_1.URLSearchParams(options.params);
            path += `?${searchParams}`;
        }
        const opts = {
            hostname: options.hostname,
            port: 443,
            path: path,
            method: options.method,
            headers: options.headers,
        };
        const req = follow_redirects_1.https.request(opts, (res) => {
            console.log(`[${opts.method}] ${res.statusCode} - https://${opts.hostname}${opts.path}`);
            let data = '';
            res.on('data', (chunk) => {
                data = data + chunk.toString();
            });
            res.on('end', () => {
                if (data.length > 0) {
                    const json = JSON.parse(data);
                    resolve(json);
                }
                else {
                    resolve(null);
                }
            });
        });
        req.on('error', (error) => {
            console.error(error);
            reject(error);
        });
        if (options.body && options.body.length > 0) {
            req.write(options.body);
        }
        req.end();
    });
};
/**
 * Sends a GET request.
 *
 * @param options Request options.
 *
 * @returns A JSON payload object through a Promise.
 */
const sendGet = (options) => {
    const sendRequestOptions = Object.assign({ method: 'GET' }, options);
    return sendRequest(sendRequestOptions);
};
exports.sendGet = sendGet;
/**
 * Sends a POST request.
 *
 * @param options Request options.
 *
 * @returns A JSON payload object through a Promise.
 */
const sendPost = (options) => {
    if (!options.body) {
        // The REST APIs don't support an empty payload
        options.body = '{}';
    }
    options.headers['Content-Length'] = options.body.length;
    const sendRequestOptions = Object.assign({ method: 'POST' }, options);
    return sendRequest(sendRequestOptions);
};
exports.sendPost = sendPost;
/**
 * Sends a PUT request.
 *
 * @param options Request options.
 *
 * @returns A JSON payload object through a Promise.
 */
const sendPut = (options) => {
    options.headers['Content-Length'] = options.body.length;
    const sendRequestOptions = Object.assign({ method: 'PUT' }, options);
    return sendRequest(sendRequestOptions);
};
exports.sendPut = sendPut;
/**
 * Sends a DELETE request.
 *
 * @param options Request options.
 *
 * @returns A JSON payload object through a Promise.
 */
const sendDelete = (options) => __awaiter(void 0, void 0, void 0, function* () {
    const sendRequestOptions = Object.assign({ method: 'DELETE' }, options);
    return yield sendRequest(sendRequestOptions);
});
exports.sendDelete = sendDelete;
/**
 * Download a file.
 *
 * @param filepath Where to save the file.
 * @param options Request options.
 */
const download = (filepath, options) => {
    const sendRequestOptions = Object.assign({ method: 'GET' }, options);
    return new Promise((resolve, reject) => {
        let path = sendRequestOptions.path;
        if (sendRequestOptions.params && Object.keys(sendRequestOptions.params).length > 0) {
            const searchParams = new url_1.URLSearchParams(sendRequestOptions.params);
            path += `?${searchParams}`;
        }
        const opts = {
            hostname: sendRequestOptions.hostname,
            port: 443,
            path: path,
            method: sendRequestOptions.method,
            headers: sendRequestOptions.headers,
        };
        const req = follow_redirects_1.https.request(opts, (res) => {
            console.log(`[${opts.method}] ${res.statusCode} - https://${opts.hostname}${opts.path}`);
            const fileStream = fs_1.default.createWriteStream(filepath, { autoClose: true });
            fileStream.on('finish', () => {
                resolve();
            });
            fileStream.on('error', (error) => {
                console.error(error);
                reject(error);
            });
            res.pipe(fileStream);
        });
        req.on('error', (error) => {
            console.error(error);
            reject(error);
        });
        if (options.body && options.body.length > 0) {
            req.write(options.body);
        }
        req.end();
    });
};
exports.download = download;
//# sourceMappingURL=httpHelpers.js.map